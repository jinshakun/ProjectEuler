function projectEuler11() {
  const 문제 = `<div id="content">


<h2>20×20 격자에서 연속된 네 수의 곱 중 최댓값</h2>
<h4 title="난이도 &#9749;">Problem 11</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=11">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, &#9749;</div>
<br/>

<div class="problem_content">
    <p>아래와 같은 20×20 격자가 있습니다.</p>
<blockquote><samp style="font-family:Menlo,monospace;">
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br />
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br />
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br />
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br />
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br />
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br />
32 98 81 28 64 23 67 10 <span style="color:#f00;"><b>26</b></span> 38 40 67 59 54 70 66 18 38 64 70<br />
67 26 20 68 02 62 12 20 95 <span style="color:#f00;"><b>63</b></span> 94 39 63 08 40 91 66 49 94 21<br />
24 55 58 05 66 73 99 26 97 17 <span style="color:#f00;"><b>78</b></span> 78 96 83 14 88 34 89 63 72<br />
21 36 23 09 75 00 76 44 20 45 35 <span style="color:#f00;"><b>14</b></span> 00 61 33 97 34 31 33 95<br />
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br />
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br />
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br />
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br />
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br />
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br />
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br />
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br />
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br />
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
</samp></blockquote>
<p>위에서 대각선 방향으로 연속된 붉은 수 네 개의 곱은 26 &times; 63 &times; 78 &times; 14 = 1788696 입니다.</p>
<p>그러면 수평, 수직, 또는 대각선 방향으로 연속된 수 네 개의 곱 중 최댓값은 얼마입니까?</p></div>

<br/>`
  let data = `08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48`
  data = data.replace(/\n/g, " ");
  let process = data.split(" ");
  let result = 0;

  for (let i = 0; i < 400; i++) {
    x = process[i] * process[i + 1] * process[i + 2] * process[i + 3];
    y = process[i] * process[i + 20] * process[i + 40] * process[i + 60];
    z = process[i] * process[i + 21] * process[i + 42] * process[i + 63];
    b = process[i] * process[i + 19] * process[i + 38] * process[i + 57];
    x = isNaN(x) ? 0 : x;
    y = isNaN(y) ? 0 : y;
    z = isNaN(z) ? 0 : z;
    b = isNaN(b) ? 0 : b;
    a = Math.max(x, y, z, b);
    result = (result > a ? result : a);
  }

  return {
    doc: 문제,
    result: result
  };
}


function projectEuler12() {
  const 문제 = `<div id="content">


<h2>500개 이상의 약수를 갖는 가장 작은 삼각수는?</h2>
<h4 title="난이도 &#9749;">Problem 12</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=12">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, &#9749;</div>
<br/>

<div class="problem_content">
    <p>1부터 n까지의 자연수를 차례로 더하여 구해진 값을 삼각수라고 합니다.<br/>
예를 들어 7번째 삼각수는 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28이 됩니다.<br/>
이런 식으로 삼각수를 구해 나가면 다음과 같습니다.</p>
<blockquote>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</blockquote>
<p>이 삼각수들의 약수를 구해 봅시다.</p>
<blockquote><tt>
<strong> 1</strong>: 1<br />
<strong> 3</strong>: 1, 3<br />
<strong> 6</strong>: 1, 2, 3, 6<br />
<strong>10</strong>: 1, 2, 5, 10<br />
<strong>15</strong>: 1, 3, 5, 15<br />
<strong>21</strong>: 1, 3, 7, 21<br />
<strong>28</strong>: 1, 2, 4, 7, 14, 28
</tt></blockquote>
<p>위에서 보듯이, 5개 이상의 약수를 갖는 첫번째 삼각수는 28입니다.</p>
<p>그러면 500개 이상의 약수를 갖는 가장 작은 삼각수는 얼마입니까?</p></div>

<br/>`
  let result = 0
  let adder = 1
  let 삼각수 = 0
  while (true) {
    삼각수 += adder;
    if (약수의_겟수(삼각수) >= 500) {
      result = 삼각수;
      break
    }
    adder++
  }

  return {
    doc: 문제,
    result: result
  };

}

function projectEuler13() {
  const doc = `<div id="content">


<h2>50자리 수 100개를 더한 값의 첫 10자리 구하기</h2>
<h4 title="난이도 ☕">Problem 13</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=13">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, ☕</div>
<br>

<div class="problem_content">
    <p>아래에 50자리 수가 100개 있습니다. 이것을 모두 더한 값의 첫 10자리는 얼마입니까?</p>
<blockquote><samp style="font-family:Menlo,monospace;">
37107287533902102798797998220837590246510135740250<br>46376937677490009712648124896970078050417018260538<br>74324986199524741059474233309513058123726617309629<br>91942213363574161572522430563301811072406154908250<br>23067588207539346171171980310421047513778063246676<br>89261670696623633820136378418383684178734361726757<br>28112879812849979408065481931592621691275889832738<br>44274228917432520321923589422876796487670272189318<br>47451445736001306439091167216856844588711603153276<br>70386486105843025439939619828917593665686757934951<br>62176457141856560629502157223196586755079324193331<br>64906352462741904929101432445813822663347944758178<br>92575867718337217661963751590579239728245598838407<br>58203565325359399008402633568948830189458628227828<br>80181199384826282014278194139940567587151170094390<br>35398664372827112653829987240784473053190104293586<br>86515506006295864861532075273371959191420517255829<br>71693888707715466499115593487603532921714970056938<br>54370070576826684624621495650076471787294438377604<br>53282654108756828443191190634694037855217779295145<br>36123272525000296071075082563815656710885258350721<br>45876576172410976447339110607218265236877223636045<br>17423706905851860660448207621209813287860733969412<br>81142660418086830619328460811191061556940512689692<br>51934325451728388641918047049293215058642563049483<br>62467221648435076201727918039944693004732956340691<br>15732444386908125794514089057706229429197107928209<br>55037687525678773091862540744969844508330393682126<br>18336384825330154686196124348767681297534375946515<br>80386287592878490201521685554828717201219257766954<br>78182833757993103614740356856449095527097864797581<br>16726320100436897842553539920931837441497806860984<br>48403098129077791799088218795327364475675590848030<br>87086987551392711854517078544161852424320693150332<br>59959406895756536782107074926966537676326235447210<br>69793950679652694742597709739166693763042633987085<br>41052684708299085211399427365734116182760315001271<br>65378607361501080857009149939512557028198746004375<br>35829035317434717326932123578154982629742552737307<br>94953759765105305946966067683156574377167401875275<br>88902802571733229619176668713819931811048770190271<br>25267680276078003013678680992525463401061632866526<br>36270218540497705585629946580636237993140746255962<br>24074486908231174977792365466257246923322810917141<br>91430288197103288597806669760892938638285025333403<br>34413065578016127815921815005561868836468420090470<br>23053081172816430487623791969842487255036638784583<br>11487696932154902810424020138335124462181441773470<br>63783299490636259666498587618221225225512486764533<br>67720186971698544312419572409913959008952310058822<br>95548255300263520781532296796249481641953868218774<br>76085327132285723110424803456124867697064507995236<br>37774242535411291684276865538926205024910326572967<br>23701913275725675285653248258265463092207058596522<br>29798860272258331913126375147341994889534765745501<br>18495701454879288984856827726077713721403798879715<br>38298203783031473527721580348144513491373226651381<br>34829543829199918180278916522431027392251122869539<br>40957953066405232632538044100059654939159879593635<br>29746152185502371307642255121183693803580388584903<br>41698116222072977186158236678424689157993532961922<br>62467957194401269043877107275048102390895523597457<br>23189706772547915061505504953922979530901129967519<br>86188088225875314529584099251203829009407770775672<br>11306739708304724483816533873502340845647058077308<br>82959174767140363198008187129011875491310547126581<br>97623331044818386269515456334926366572897563400500<br>42846280183517070527831839425882145521227251250327<br>55121603546981200581762165212827652751691296897789<br>32238195734329339946437501907836945765883352399886<br>75506164965184775180738168837861091527357929701337<br>62177842752192623401942399639168044983993173312731<br>32924185707147349566916674687634660915035914677504<br>99518671430235219628894890102423325116913619626622<br>73267460800591547471830798392868535206946944540724<br>76841822524674417161514036427982273348055556214818<br>97142617910342598647204516893989422179826088076852<br>87783646182799346313767754307809363333018982642090<br>10848802521674670883215120185883543223812876952786<br>71329612474782464538636993009049310363619763878039<br>62184073572399794223406235393808339651327408011116<br>66627891981488087797941876876144230030984490851411<br>60661826293682836764744779239180335110989069790714<br>85786944089552990653640447425576083659976645795096<br>66024396409905389607120198219976047599490197230297<br>64913982680032973156037120041377903785566085089252<br>16730939319872750275468906903707539413042652315011<br>94809377245048795150954100921645863754710598436791<br>78639167021187492431995700641917969777599028300699<br>15368713711936614952811305876380278410754449733078<br>40789923115535562561142322423255033685442488917353<br>44889911501440648020369068063960672322193204149535<br>41503128880339536053299340368006977710650566631954<br>81234880673210146739058568557934581403627822703280<br>82616570773948327592232845941706525094512325230608<br>22918802058777319719839450180888072429661980811197<br>77158542502016545090413245809786882778948721859617<br>72107838435069186155435662884062257473692284509516<br>20849603980134001723930671666823555245252804609722<br>53503534226472524250874054075591789781264330331690
</samp></blockquote></div>
`
  let source = "37107287533902102798797998220837590246510135740250<br>46376937677490009712648124896970078050417018260538<br>74324986199524741059474233309513058123726617309629<br>91942213363574161572522430563301811072406154908250<br>23067588207539346171171980310421047513778063246676<br>89261670696623633820136378418383684178734361726757<br>28112879812849979408065481931592621691275889832738<br>44274228917432520321923589422876796487670272189318<br>47451445736001306439091167216856844588711603153276<br>70386486105843025439939619828917593665686757934951<br>62176457141856560629502157223196586755079324193331<br>64906352462741904929101432445813822663347944758178<br>92575867718337217661963751590579239728245598838407<br>58203565325359399008402633568948830189458628227828<br>80181199384826282014278194139940567587151170094390<br>35398664372827112653829987240784473053190104293586<br>86515506006295864861532075273371959191420517255829<br>71693888707715466499115593487603532921714970056938<br>54370070576826684624621495650076471787294438377604<br>53282654108756828443191190634694037855217779295145<br>36123272525000296071075082563815656710885258350721<br>45876576172410976447339110607218265236877223636045<br>17423706905851860660448207621209813287860733969412<br>81142660418086830619328460811191061556940512689692<br>51934325451728388641918047049293215058642563049483<br>62467221648435076201727918039944693004732956340691<br>15732444386908125794514089057706229429197107928209<br>55037687525678773091862540744969844508330393682126<br>18336384825330154686196124348767681297534375946515<br>80386287592878490201521685554828717201219257766954<br>78182833757993103614740356856449095527097864797581<br>16726320100436897842553539920931837441497806860984<br>48403098129077791799088218795327364475675590848030<br>87086987551392711854517078544161852424320693150332<br>59959406895756536782107074926966537676326235447210<br>69793950679652694742597709739166693763042633987085<br>41052684708299085211399427365734116182760315001271<br>65378607361501080857009149939512557028198746004375<br>35829035317434717326932123578154982629742552737307<br>94953759765105305946966067683156574377167401875275<br>88902802571733229619176668713819931811048770190271<br>25267680276078003013678680992525463401061632866526<br>36270218540497705585629946580636237993140746255962<br>24074486908231174977792365466257246923322810917141<br>91430288197103288597806669760892938638285025333403<br>34413065578016127815921815005561868836468420090470<br>23053081172816430487623791969842487255036638784583<br>11487696932154902810424020138335124462181441773470<br>63783299490636259666498587618221225225512486764533<br>67720186971698544312419572409913959008952310058822<br>95548255300263520781532296796249481641953868218774<br>76085327132285723110424803456124867697064507995236<br>37774242535411291684276865538926205024910326572967<br>23701913275725675285653248258265463092207058596522<br>29798860272258331913126375147341994889534765745501<br>18495701454879288984856827726077713721403798879715<br>38298203783031473527721580348144513491373226651381<br>34829543829199918180278916522431027392251122869539<br>40957953066405232632538044100059654939159879593635<br>29746152185502371307642255121183693803580388584903<br>41698116222072977186158236678424689157993532961922<br>62467957194401269043877107275048102390895523597457<br>23189706772547915061505504953922979530901129967519<br>86188088225875314529584099251203829009407770775672<br>11306739708304724483816533873502340845647058077308<br>82959174767140363198008187129011875491310547126581<br>97623331044818386269515456334926366572897563400500<br>42846280183517070527831839425882145521227251250327<br>55121603546981200581762165212827652751691296897789<br>32238195734329339946437501907836945765883352399886<br>75506164965184775180738168837861091527357929701337<br>62177842752192623401942399639168044983993173312731<br>32924185707147349566916674687634660915035914677504<br>99518671430235219628894890102423325116913619626622<br>73267460800591547471830798392868535206946944540724<br>76841822524674417161514036427982273348055556214818<br>97142617910342598647204516893989422179826088076852<br>87783646182799346313767754307809363333018982642090<br>10848802521674670883215120185883543223812876952786<br>71329612474782464538636993009049310363619763878039<br>62184073572399794223406235393808339651327408011116<br>66627891981488087797941876876144230030984490851411<br>60661826293682836764744779239180335110989069790714<br>85786944089552990653640447425576083659976645795096<br>66024396409905389607120198219976047599490197230297<br>64913982680032973156037120041377903785566085089252<br>16730939319872750275468906903707539413042652315011<br>94809377245048795150954100921645863754710598436791<br>78639167021187492431995700641917969777599028300699<br>15368713711936614952811305876380278410754449733078<br>40789923115535562561142322423255033685442488917353<br>44889911501440648020369068063960672322193204149535<br>41503128880339536053299340368006977710650566631954<br>81234880673210146739058568557934581403627822703280<br>82616570773948327592232845941706525094512325230608<br>22918802058777319719839450180888072429661980811197<br>77158542502016545090413245809786882778948721859617<br>72107838435069186155435662884062257473692284509516<br>20849603980134001723930671666823555245252804609722<br>53503534226472524250874054075591789781264330331690";
  let result = 0n;
  source.split("<br>").forEach(num => {
    result += BigInt(num);
  });
  result = String(result).substr(0, 10);

  return {
    doc: doc,
    result: result
  };
}

function projectEuler14() {
  const doc = `<div id="content">


  <h2>백만 이하로 시작하는 우박수 중 가장 긴 과정을 거치는 것은?</h2>
  <h4 title="난이도 &#9749;">Problem 14</h4>
  
  <div class="info" style="float:right; font-size:90%;">
      <a target="_blank" href="https://projecteuler.net/problem=14">[ProjectEuler.net 원본]</a>
  </div>
  <div style="color:#666;font-size:80%; margin-top:10px;">
      출제 일시 : 2012-01-03 19:11:35, &#9749;</div>
  <br/>
  
  <div class="problem_content">
      <p>양의 정수 n에 대하여, 다음과 같은 계산 과정을 반복하기로 합니다.</p>
  <p style="margin-left: 50.0px;">
   <span class="eqn"> <i>n</i> &rarr; <i>n</i> / 2 </span> (<span class="eqn"><i>n</i></span>이 짝수일 때)<br />
   <span class="eqn"><i>n</i> &rarr; 3 <i>n</i> + 1</span> (<span class="eqn"><i>n</i></span>이 홀수일 때)</p>
  <p>13에 대하여 위의 규칙을 적용해보면 아래처럼 10번의 과정을 통해 1이 됩니다.</p>
  <blockquote>13 &rarr; 40 &rarr; 20 &rarr; 10 &rarr; 5 &rarr; 16 &rarr; 8 &rarr; 4 &rarr; 2 &rarr; 1</blockquote>
  <p>아직 증명은 되지 않았지만, 이런 과정을 거치면 어떤 수로 시작해도 마지막에는 1로 끝나리라 생각됩니다. <br/>
  <font size="-1">(역주: 이것은 콜라츠 추측 Collatz Conjecture이라고 하며, 이런 수들을 우박수 hailstone sequence라 부르기도 합니다)</font></p>
  <p>그러면, 백만(1,000,000) 이하의 수로 시작했을 때 1까지 도달하는데 가장 긴 과정을 거치는 수는 얼마입니까?</p>
  <p><b>참고:</b> 계산 과정에는 백만을 넘어가는 수가 나와도 괜찮습니다.</p></div>
  
  <br/>`

  let 우박수결과 = [];
  let result = 0;
  function 우박수(번호) {
    if (우박수결과[번호] != null) {
      return 우박수결과[번호];
    }
    if (번호 <= 1) {
      return 1;
    }
    if (번호 % 2 == 0) {
      return 우박수(번호 / 2) + 1;
    } else {
      return 우박수((번호 * 3) + 1) + 1;
    }
  }
  for (let i = 1; i <= 1000000; i++) {
    우박수결과[i] = 우박수(i);
    result = (result < 우박수결과[i] ? 우박수결과[i] : result);
  }

  return {
    doc: doc,
    result: result + "<br>" + 우박수결과,
    hailstone_sequence: 우박수결과
  };
}

function projectEuler15(a=20,b=20) {
  const doc = `<div id="content">


<h2>20×20 격자의 좌상단에서 우하단으로 가는 경로의 수</h2>
<h4 title="난이도 ☕">Problem 15</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=15">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, ☕</div>
<br>

<div class="problem_content">
    <p>아래와 같은 2 × 2 격자의 왼쪽 위 모서리에서 출발하여 오른쪽 아래 모서리까지 도달하는 길은 모두 6가지가 있습니다 (거슬러 가지는 않기로 합니다).</p>
<blockquote><img src="https://euler.synap.co.kr/images/p_015.gif"></blockquote>
<p>그러면 20 × 20 격자에는 모두 몇 개의 경로가 있습니까?</p></div>

</div>`
  const result = factorial(a+b)/(factorial(a)*factorial(b))
  
  
  return {
    doc: doc,
    result: result
  }
}


function projectEuler16() {
  const doc = `<div id="content">


<h2>2<sup>1000</sup>의 각 자릿수를 모두 더하면?</h2>
<h4 title="난이도 ☕">Problem 16</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=16">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, ☕</div>
<br>

<div class="problem_content">
    <p>2<sup>15</sup> = 32768 의 각 자릿수를 더하면 3 + 2 + 7 + 6 + 8 = 26 입니다.</p>
<p>2<sup>1000</sup>의 각 자릿수를 모두 더하면 얼마입니까?</p></div>
`

  const tst_big = 2n ** 1000n;
  let result = 0;
  tst_big.toString().split("").forEach(num => {
    result += Number(num);
  });

  return {
    doc: doc,
    toSqrtThou: tst_big,
    result: result + "<hr/>"
      + tst_big + "<br/>"
  };

}

function projecteuler17(){
  const doc = `<div id="content">


<h2>1부터 1000까지 영어로 썼을 때 사용된 글자의 개수는?</h2>
<h4 title="난이도 ☕">Problem 17</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=17">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, ☕</div>
<br>

<div class="problem_content">
    <p>1부터 5까지의 수를 영어로 쓰면 <var>one, two, three, four, five</var> 이고,<br>
각 단어의 길이를 더하면 3 + 3 + 5 + 4 + 4 = 19 이므로 사용된 글자는 모두 19개입니다.</p>
<p>1부터 1,000까지 영어로 썼을 때는 모두 몇 개의 글자를 사용해야 할까요?</p>
<p><strong>참고:</strong>&nbsp;빈 칸이나 하이픈('-')은 셈에서 제외하며,&nbsp;단어 사이의 <var>and</var> 는 셈에 넣습니다.<br>
&nbsp; 예를 들어 342를 영어로 쓰면 <var>three hundred and forty-two</var> 가 되어서 23 글자,<br>
&nbsp; 115 = <var>one hundred and fifteen</var> 의 경우에는 20 글자가 됩니다.</p></div>

<br>
    <div style="text-align:center;" class="noprint">
        <a href="login.php">로그인</a> 하시면 답안을 제출할 수 있고,<br>
        정답을 맞히신 분들은 댓글을 달거나 볼 수 있습니다.
    </div>
<br>
<div id="footer" class="noprint">
    <br>
    Operated &amp; Hosted by <a href="https://www.synapsoft.co.kr" target="_blank">(주)사이냅소프트</a>
    |
    <a href="https://www.synapsoft.co.kr/privacy" target="_blank">개인정보처리방침</a>
    <br>
    <a href="/copyright.php">저작권에 대한 정보 (Creative Commons License BY-NC-SA 4.0)</a>
    <br>
    문의 메일 euler@synapsoft.co.kr 트위터 <a target="_blank" href="https://twitter.com/ProjectEulerKR">@ProjectEulerKR</a>
</div>

</div>`
  let result = 0
  return {
    doc : doc,
    result : result
  }
}



function projectEuler20() {
  const doc = `<div id="content">
  


<h2>100! 의 자릿수를 모두 더하면?</h2>
<h4 title="난이도 ☕">Problem 20</h4>

<div class="info" style="float:right; font-size:90%;">
    <a target="_blank" href="https://projecteuler.net/problem=20">[ProjectEuler.net 원본]</a>
</div>
<div style="color:#666;font-size:80%; margin-top:10px;">
    출제 일시 : 2012-01-03 19:11:35, ☕</div>
<br>

<div class="problem_content">
    <p><var>n</var>! 이라는 표기법은 <var>n</var> × (<var>n</var> − 1) × ... × 3 × 2 × 1을 뜻합니다.</p>
<p>예를 들자면 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800 이 되는데,<br>
 여기서 10!의 각 자릿수를 더해 보면 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27 입니다.</p>
<p> 100! 의 자릿수를 모두 더하면 얼마입니까?</p></div>
`
  let result = 0;
  const ohf = factorial(100);
  ohf.toString().split("").forEach(num => {
    result += Number(num);
  });

  return {
    doc: doc,
    factorialHund: ohf,
    result: result + "<hr/>"
    + ohf + "<br/>"
  };
}





